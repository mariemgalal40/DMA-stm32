#include "DMA.h"
#include "GPIO.h"
#include "EXIT.h"

unsigned int *DMA_REG[2][7]={{DMA2_LISR,DMA2_LIFCR,DMA2_S0CR,DMA2_S0NDTR,DMA2_S0PAR,DMA2_S0M0AR,DMA2_S0FCR},
		{DMA1_LISR,DMA1_LIFCR,DMA1_S0CR,DMA1_S0NDTR,DMA1_S0PAR,DMA1_S0M0AR,DMA1_S0FCR}};

void DMA_Init(unsigned char id){

	*RCC_AHB1ENR |= 1<<22;
	*DMA_REG[id][2] &= ~(0x01<<0); //disable stream 0
	while (((*DMA_REG[id][2] &(1<<0))>>0)==1){} //don't do any thing untill bin 0 becomes 0
//	*DMA_REG[id][2] &=~(0x07<<25); //select channel 0

	switch (id) {
		case 1:
			*NVIC_ISER0 = (0x01<<11) ;   //	enable the interrupt for dma1 stream0
				break;
		case 0:
			*DMA_REG[id][6] &= ~(0x01<<14);  //	enable the interrupt for dma2 stream0
				break;
			default:
				break;
		}
	*DMA_REG[id][2] |= 0x01<<4;  //enable transfer complete interrupt
}

void DMA_parameters(unsigned char id,unsigned char* Source_address,unsigned char *destination_address,
		unsigned char transfers_no,
		unsigned char transferitem_size,unsigned char transfer_mode,
		unsigned char transfer_type,unsigned char transfer_dir){
	*DMA_REG[id][4] = *Source_address;  //peripheral address register
	*DMA_REG[id][5] = *destination_address;  //memory 0 address register
	*DMA_REG[id][2] |= (0x03<<16);  //periority level -->very hogh
	*DMA_REG[id][2] &= ~(0x01<<5); //dma is the flow controller
	*DMA_REG[id][2] |=1<<9;  //Peripheral increment mode
	*DMA_REG[id][2] |=1<<10;  //Memory increment mode


	if (transfer_dir == 0)  //m_to_m , m_to_p ,p_to_m
	{
		*DMA_REG[id][2] &= ~(transfer_dir<<6);
	}
	else {
		*DMA_REG[id][2] |= (transfer_dir<<6);
	}

	if (transferitem_size == 0) //byte....word
	{
		*DMA_REG[id][2] &=~(transferitem_size<<13); //memory data size
		*DMA_REG[id][2] &=~(transferitem_size<<11); //Peripheral data size
		}
		else {
			*DMA_REG[id][2] |= (transferitem_size<<13);
			*DMA_REG[id][2] |= (transferitem_size<<11);
		}

	if (transfer_type == 0)
	{
		*DMA_REG[id][2] &= ~(transfer_type<<23); //single Memory transfer
		*DMA_REG[id][2] &= ~(transfer_type<<21);  //single Peripheral transfer
			}
	else {
		*DMA_REG[id][2] |= (transfer_type<<23); //Memory burst transfer
		*DMA_REG[id][2] |= (transfer_type<<21);  //Peripheral burst transfer
				}
	switch (transfer_type)  //single or burst
	{
				case single_transfer:
					*DMA_REG[id][3] =transfers_no/transferitem_size;  //transfers no
	  	 				break;
				case BEATS4:
					*DMA_REG[id][3] =transfers_no/(transferitem_size*4);
						break;
				case BEATS8:
					*DMA_REG[id][3] =transfers_no/(transferitem_size*8);
						break;
				case BEATS16:
					*DMA_REG[id][3] =transfers_no/(transferitem_size*16);
						break;
					default:
						break;
				}

	switch (transfer_mode) {
			case fifo:
				*DMA_REG[id][6] |= 0x01<<2; //enable fifo
				*DMA_REG[id][6] |=( 0x03<<0); //full fifo
  	 				break;
			case direct_mode:
				*DMA_REG[id][6] &= ~(0x01<<2);
					break;
				default:
					break;
			}

}

int start_transfer (unsigned char id){

	*DMA_REG[id][1] |= (0x01<<0);   //clear all interrupts flags (fifo,direct,transfer complete ..)
	*DMA_REG[id][1] |= (0x01<<2);
	*DMA_REG[id][1] |= (0x01<<3);
	*DMA_REG[id][1] |= (0x01<<4);
	*DMA_REG[id][1] |= (0x01<<5);
	*DMA_REG[id][2] |= (0x01<<0); //enable stream0
//	return 5;
}

//void DMA2_Stream0_IRQHandler()
//{
//
//	*DMA_REG[0][1] |= (0x01<<5);   //clear transfer complete interrupt flag
//	}

