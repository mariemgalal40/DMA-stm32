
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c80  08000c80  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c80  08000c80  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08000c80  08000c80  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c80  08000c80  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c80  08000c80  00010c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c84  08000c84  00010c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08000c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000088  08000d10  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08000d10  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009c0  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003b0  00000000  00000000  00020a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  00020e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b0  00000000  00000000  00020f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dda1  00000000  00000000  00020fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ad1  00000000  00000000  0002ed71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005037e  00000000  00000000  0002f842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007fbc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000274  00000000  00000000  0007fc14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000088 	.word	0x20000088
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000c68 	.word	0x08000c68

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000008c 	.word	0x2000008c
 80001d0:	08000c68 	.word	0x08000c68

080001d4 <DMA_Init>:
#include "EXIT.h"

unsigned int *DMA_REG[2][7]={{DMA2_LISR,DMA2_LIFCR,DMA2_S0CR,DMA2_S0NDTR,DMA2_S0PAR,DMA2_S0M0AR,DMA2_S0FCR},
		{DMA1_LISR,DMA1_LIFCR,DMA1_S0CR,DMA1_S0NDTR,DMA1_S0PAR,DMA1_S0M0AR,DMA1_S0FCR}};

void DMA_Init(unsigned char id){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]

	switch (id) {
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d00c      	beq.n	80001fe <DMA_Init+0x2a>
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d115      	bne.n	8000214 <DMA_Init+0x40>
		case 1:
			*NVIC_ISER0 = (0x01<<11) ;   //	enable the interrupt for dma1 stream0
 80001e8:	4b40      	ldr	r3, [pc, #256]	; (80002ec <DMA_Init+0x118>)
 80001ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80001ee:	601a      	str	r2, [r3, #0]
			*RCC_AHB1ENR |= 1<<21;       //DMA1 enable clock
 80001f0:	4b3f      	ldr	r3, [pc, #252]	; (80002f0 <DMA_Init+0x11c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a3e      	ldr	r2, [pc, #248]	; (80002f0 <DMA_Init+0x11c>)
 80001f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001fa:	6013      	str	r3, [r2, #0]
				break;
 80001fc:	e00b      	b.n	8000216 <DMA_Init+0x42>
		case 0:
			*NVIC_ISER1 = (0x01<<24);  //	enable the interrupt for dma2 stream0
 80001fe:	4b3d      	ldr	r3, [pc, #244]	; (80002f4 <DMA_Init+0x120>)
 8000200:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000204:	601a      	str	r2, [r3, #0]
			*RCC_AHB1ENR |= 1<<22;
 8000206:	4b3a      	ldr	r3, [pc, #232]	; (80002f0 <DMA_Init+0x11c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a39      	ldr	r2, [pc, #228]	; (80002f0 <DMA_Init+0x11c>)
 800020c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000210:	6013      	str	r3, [r2, #0]
				break;
 8000212:	e000      	b.n	8000216 <DMA_Init+0x42>
			default:
				break;
 8000214:	bf00      	nop
		}
	*DMA_REG[id][2] &= ~(0x01<<0); //disable stream 0
 8000216:	79fa      	ldrb	r2, [r7, #7]
 8000218:	4937      	ldr	r1, [pc, #220]	; (80002f8 <DMA_Init+0x124>)
 800021a:	4613      	mov	r3, r2
 800021c:	00db      	lsls	r3, r3, #3
 800021e:	1a9b      	subs	r3, r3, r2
 8000220:	009b      	lsls	r3, r3, #2
 8000222:	440b      	add	r3, r1
 8000224:	3308      	adds	r3, #8
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	6819      	ldr	r1, [r3, #0]
 800022a:	79fa      	ldrb	r2, [r7, #7]
 800022c:	4832      	ldr	r0, [pc, #200]	; (80002f8 <DMA_Init+0x124>)
 800022e:	4613      	mov	r3, r2
 8000230:	00db      	lsls	r3, r3, #3
 8000232:	1a9b      	subs	r3, r3, r2
 8000234:	009b      	lsls	r3, r3, #2
 8000236:	4403      	add	r3, r0
 8000238:	3308      	adds	r3, #8
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f021 0201 	bic.w	r2, r1, #1
 8000240:	601a      	str	r2, [r3, #0]
	while ((*DMA_REG[id][2]>>0) == 1) {} //don't do any thing untill bin 0 becomes 0
 8000242:	bf00      	nop
 8000244:	79fa      	ldrb	r2, [r7, #7]
 8000246:	492c      	ldr	r1, [pc, #176]	; (80002f8 <DMA_Init+0x124>)
 8000248:	4613      	mov	r3, r2
 800024a:	00db      	lsls	r3, r3, #3
 800024c:	1a9b      	subs	r3, r3, r2
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	440b      	add	r3, r1
 8000252:	3308      	adds	r3, #8
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d0f3      	beq.n	8000244 <DMA_Init+0x70>

	*DMA_REG[id][2] |= 0x01<<4;  //enable transfer complete interrupt
 800025c:	79fa      	ldrb	r2, [r7, #7]
 800025e:	4926      	ldr	r1, [pc, #152]	; (80002f8 <DMA_Init+0x124>)
 8000260:	4613      	mov	r3, r2
 8000262:	00db      	lsls	r3, r3, #3
 8000264:	1a9b      	subs	r3, r3, r2
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	440b      	add	r3, r1
 800026a:	3308      	adds	r3, #8
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	6819      	ldr	r1, [r3, #0]
 8000270:	79fa      	ldrb	r2, [r7, #7]
 8000272:	4821      	ldr	r0, [pc, #132]	; (80002f8 <DMA_Init+0x124>)
 8000274:	4613      	mov	r3, r2
 8000276:	00db      	lsls	r3, r3, #3
 8000278:	1a9b      	subs	r3, r3, r2
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	4403      	add	r3, r0
 800027e:	3308      	adds	r3, #8
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f041 0210 	orr.w	r2, r1, #16
 8000286:	601a      	str	r2, [r3, #0]
	*DMA_REG[id][2] |=1<<9;  //Peripheral increment mode
 8000288:	79fa      	ldrb	r2, [r7, #7]
 800028a:	491b      	ldr	r1, [pc, #108]	; (80002f8 <DMA_Init+0x124>)
 800028c:	4613      	mov	r3, r2
 800028e:	00db      	lsls	r3, r3, #3
 8000290:	1a9b      	subs	r3, r3, r2
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	440b      	add	r3, r1
 8000296:	3308      	adds	r3, #8
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	6819      	ldr	r1, [r3, #0]
 800029c:	79fa      	ldrb	r2, [r7, #7]
 800029e:	4816      	ldr	r0, [pc, #88]	; (80002f8 <DMA_Init+0x124>)
 80002a0:	4613      	mov	r3, r2
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	1a9b      	subs	r3, r3, r2
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	4403      	add	r3, r0
 80002aa:	3308      	adds	r3, #8
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f441 7200 	orr.w	r2, r1, #512	; 0x200
 80002b2:	601a      	str	r2, [r3, #0]
	*DMA_REG[id][2] |=1<<10;  //Memory increment mode
 80002b4:	79fa      	ldrb	r2, [r7, #7]
 80002b6:	4910      	ldr	r1, [pc, #64]	; (80002f8 <DMA_Init+0x124>)
 80002b8:	4613      	mov	r3, r2
 80002ba:	00db      	lsls	r3, r3, #3
 80002bc:	1a9b      	subs	r3, r3, r2
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	440b      	add	r3, r1
 80002c2:	3308      	adds	r3, #8
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	6819      	ldr	r1, [r3, #0]
 80002c8:	79fa      	ldrb	r2, [r7, #7]
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <DMA_Init+0x124>)
 80002cc:	4613      	mov	r3, r2
 80002ce:	00db      	lsls	r3, r3, #3
 80002d0:	1a9b      	subs	r3, r3, r2
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	4403      	add	r3, r0
 80002d6:	3308      	adds	r3, #8
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 80002de:	601a      	str	r2, [r3, #0]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100
 80002f0:	40023830 	.word	0x40023830
 80002f4:	e000e104 	.word	0xe000e104
 80002f8:	20000000 	.word	0x20000000

080002fc <DMA_parameters>:

void DMA_parameters(unsigned char id,unsigned int* Source_address, unsigned int *destination_address,
		unsigned char transfers_no,
		unsigned char transferitem_size,unsigned char transfer_mode,
		unsigned char transfer_type,unsigned char transfer_dir){
 80002fc:	b490      	push	{r4, r7}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	60b9      	str	r1, [r7, #8]
 8000304:	607a      	str	r2, [r7, #4]
 8000306:	461a      	mov	r2, r3
 8000308:	4603      	mov	r3, r0
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	4613      	mov	r3, r2
 800030e:	73bb      	strb	r3, [r7, #14]
	*DMA_REG[id][4] = (unsigned int)Source_address;  //peripheral address register
 8000310:	7bfa      	ldrb	r2, [r7, #15]
 8000312:	4995      	ldr	r1, [pc, #596]	; (8000568 <DMA_parameters+0x26c>)
 8000314:	4613      	mov	r3, r2
 8000316:	00db      	lsls	r3, r3, #3
 8000318:	1a9b      	subs	r3, r3, r2
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	440b      	add	r3, r1
 800031e:	3310      	adds	r3, #16
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	68ba      	ldr	r2, [r7, #8]
 8000324:	601a      	str	r2, [r3, #0]
	*DMA_REG[id][5] = (unsigned int)destination_address;  //memory 0 address register
 8000326:	7bfa      	ldrb	r2, [r7, #15]
 8000328:	498f      	ldr	r1, [pc, #572]	; (8000568 <DMA_parameters+0x26c>)
 800032a:	4613      	mov	r3, r2
 800032c:	00db      	lsls	r3, r3, #3
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	440b      	add	r3, r1
 8000334:	3314      	adds	r3, #20
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
	*DMA_REG[id][2] |= (0x03<<16);  //periority level -->very hogh
 800033c:	7bfa      	ldrb	r2, [r7, #15]
 800033e:	498a      	ldr	r1, [pc, #552]	; (8000568 <DMA_parameters+0x26c>)
 8000340:	4613      	mov	r3, r2
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	1a9b      	subs	r3, r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	440b      	add	r3, r1
 800034a:	3308      	adds	r3, #8
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	6819      	ldr	r1, [r3, #0]
 8000350:	7bfa      	ldrb	r2, [r7, #15]
 8000352:	4885      	ldr	r0, [pc, #532]	; (8000568 <DMA_parameters+0x26c>)
 8000354:	4613      	mov	r3, r2
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	1a9b      	subs	r3, r3, r2
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	4403      	add	r3, r0
 800035e:	3308      	adds	r3, #8
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f441 3240 	orr.w	r2, r1, #196608	; 0x30000
 8000366:	601a      	str	r2, [r3, #0]
	*DMA_REG[id][2] &= ~(0x01<<5); //dma is the flow controller
 8000368:	7bfa      	ldrb	r2, [r7, #15]
 800036a:	497f      	ldr	r1, [pc, #508]	; (8000568 <DMA_parameters+0x26c>)
 800036c:	4613      	mov	r3, r2
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	440b      	add	r3, r1
 8000376:	3308      	adds	r3, #8
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	6819      	ldr	r1, [r3, #0]
 800037c:	7bfa      	ldrb	r2, [r7, #15]
 800037e:	487a      	ldr	r0, [pc, #488]	; (8000568 <DMA_parameters+0x26c>)
 8000380:	4613      	mov	r3, r2
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	4403      	add	r3, r0
 800038a:	3308      	adds	r3, #8
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f021 0220 	bic.w	r2, r1, #32
 8000392:	601a      	str	r2, [r3, #0]
	*DMA_REG[id][3] =  transfers_no;  //number of data
 8000394:	7bfa      	ldrb	r2, [r7, #15]
 8000396:	4974      	ldr	r1, [pc, #464]	; (8000568 <DMA_parameters+0x26c>)
 8000398:	4613      	mov	r3, r2
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	330c      	adds	r3, #12
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	7bba      	ldrb	r2, [r7, #14]
 80003a8:	601a      	str	r2, [r3, #0]

	if (transfer_dir == 0)  //m_to_m , m_to_p ,p_to_m
 80003aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d11b      	bne.n	80003ea <DMA_parameters+0xee>
	{
		*DMA_REG[id][2] &= ~(transfer_dir<<6);   //p_to_m
 80003b2:	7bfa      	ldrb	r2, [r7, #15]
 80003b4:	496c      	ldr	r1, [pc, #432]	; (8000568 <DMA_parameters+0x26c>)
 80003b6:	4613      	mov	r3, r2
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	1a9b      	subs	r3, r3, r2
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	440b      	add	r3, r1
 80003c0:	3308      	adds	r3, #8
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	6819      	ldr	r1, [r3, #0]
 80003c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003ca:	019b      	lsls	r3, r3, #6
 80003cc:	43db      	mvns	r3, r3
 80003ce:	461c      	mov	r4, r3
 80003d0:	7bfa      	ldrb	r2, [r7, #15]
 80003d2:	4865      	ldr	r0, [pc, #404]	; (8000568 <DMA_parameters+0x26c>)
 80003d4:	4613      	mov	r3, r2
 80003d6:	00db      	lsls	r3, r3, #3
 80003d8:	1a9b      	subs	r3, r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	4403      	add	r3, r0
 80003de:	3308      	adds	r3, #8
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	ea01 0204 	and.w	r2, r1, r4
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	e019      	b.n	800041e <DMA_parameters+0x122>
	}
	else {
		*DMA_REG[id][2] |= (transfer_dir<<6);
 80003ea:	7bfa      	ldrb	r2, [r7, #15]
 80003ec:	495e      	ldr	r1, [pc, #376]	; (8000568 <DMA_parameters+0x26c>)
 80003ee:	4613      	mov	r3, r2
 80003f0:	00db      	lsls	r3, r3, #3
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	440b      	add	r3, r1
 80003f8:	3308      	adds	r3, #8
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	6819      	ldr	r1, [r3, #0]
 80003fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000402:	019b      	lsls	r3, r3, #6
 8000404:	461c      	mov	r4, r3
 8000406:	7bfa      	ldrb	r2, [r7, #15]
 8000408:	4857      	ldr	r0, [pc, #348]	; (8000568 <DMA_parameters+0x26c>)
 800040a:	4613      	mov	r3, r2
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4403      	add	r3, r0
 8000414:	3308      	adds	r3, #8
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	ea41 0204 	orr.w	r2, r1, r4
 800041c:	601a      	str	r2, [r3, #0]
	}

	if (transferitem_size == 0) //byte..half_word..word
 800041e:	7e3b      	ldrb	r3, [r7, #24]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d134      	bne.n	800048e <DMA_parameters+0x192>
	{
		*DMA_REG[id][2] &=~(transferitem_size<<13); //memory data size
 8000424:	7bfa      	ldrb	r2, [r7, #15]
 8000426:	4950      	ldr	r1, [pc, #320]	; (8000568 <DMA_parameters+0x26c>)
 8000428:	4613      	mov	r3, r2
 800042a:	00db      	lsls	r3, r3, #3
 800042c:	1a9b      	subs	r3, r3, r2
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	440b      	add	r3, r1
 8000432:	3308      	adds	r3, #8
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	6819      	ldr	r1, [r3, #0]
 8000438:	7e3b      	ldrb	r3, [r7, #24]
 800043a:	035b      	lsls	r3, r3, #13
 800043c:	43db      	mvns	r3, r3
 800043e:	461c      	mov	r4, r3
 8000440:	7bfa      	ldrb	r2, [r7, #15]
 8000442:	4849      	ldr	r0, [pc, #292]	; (8000568 <DMA_parameters+0x26c>)
 8000444:	4613      	mov	r3, r2
 8000446:	00db      	lsls	r3, r3, #3
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4403      	add	r3, r0
 800044e:	3308      	adds	r3, #8
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	ea01 0204 	and.w	r2, r1, r4
 8000456:	601a      	str	r2, [r3, #0]
		*DMA_REG[id][2] &=~(transferitem_size<<11); //Peripheral data size
 8000458:	7bfa      	ldrb	r2, [r7, #15]
 800045a:	4943      	ldr	r1, [pc, #268]	; (8000568 <DMA_parameters+0x26c>)
 800045c:	4613      	mov	r3, r2
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	440b      	add	r3, r1
 8000466:	3308      	adds	r3, #8
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	6819      	ldr	r1, [r3, #0]
 800046c:	7e3b      	ldrb	r3, [r7, #24]
 800046e:	02db      	lsls	r3, r3, #11
 8000470:	43db      	mvns	r3, r3
 8000472:	461c      	mov	r4, r3
 8000474:	7bfa      	ldrb	r2, [r7, #15]
 8000476:	483c      	ldr	r0, [pc, #240]	; (8000568 <DMA_parameters+0x26c>)
 8000478:	4613      	mov	r3, r2
 800047a:	00db      	lsls	r3, r3, #3
 800047c:	1a9b      	subs	r3, r3, r2
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	4403      	add	r3, r0
 8000482:	3308      	adds	r3, #8
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	ea01 0204 	and.w	r2, r1, r4
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	e031      	b.n	80004f2 <DMA_parameters+0x1f6>
		}
		else {
			*DMA_REG[id][2] |= (transferitem_size<<13);
 800048e:	7bfa      	ldrb	r2, [r7, #15]
 8000490:	4935      	ldr	r1, [pc, #212]	; (8000568 <DMA_parameters+0x26c>)
 8000492:	4613      	mov	r3, r2
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	440b      	add	r3, r1
 800049c:	3308      	adds	r3, #8
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	6819      	ldr	r1, [r3, #0]
 80004a2:	7e3b      	ldrb	r3, [r7, #24]
 80004a4:	035b      	lsls	r3, r3, #13
 80004a6:	461c      	mov	r4, r3
 80004a8:	7bfa      	ldrb	r2, [r7, #15]
 80004aa:	482f      	ldr	r0, [pc, #188]	; (8000568 <DMA_parameters+0x26c>)
 80004ac:	4613      	mov	r3, r2
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	1a9b      	subs	r3, r3, r2
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	4403      	add	r3, r0
 80004b6:	3308      	adds	r3, #8
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	ea41 0204 	orr.w	r2, r1, r4
 80004be:	601a      	str	r2, [r3, #0]
			*DMA_REG[id][2] |= (transferitem_size<<11);
 80004c0:	7bfa      	ldrb	r2, [r7, #15]
 80004c2:	4929      	ldr	r1, [pc, #164]	; (8000568 <DMA_parameters+0x26c>)
 80004c4:	4613      	mov	r3, r2
 80004c6:	00db      	lsls	r3, r3, #3
 80004c8:	1a9b      	subs	r3, r3, r2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	440b      	add	r3, r1
 80004ce:	3308      	adds	r3, #8
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	6819      	ldr	r1, [r3, #0]
 80004d4:	7e3b      	ldrb	r3, [r7, #24]
 80004d6:	02db      	lsls	r3, r3, #11
 80004d8:	461c      	mov	r4, r3
 80004da:	7bfa      	ldrb	r2, [r7, #15]
 80004dc:	4822      	ldr	r0, [pc, #136]	; (8000568 <DMA_parameters+0x26c>)
 80004de:	4613      	mov	r3, r2
 80004e0:	00db      	lsls	r3, r3, #3
 80004e2:	1a9b      	subs	r3, r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4403      	add	r3, r0
 80004e8:	3308      	adds	r3, #8
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	ea41 0204 	orr.w	r2, r1, r4
 80004f0:	601a      	str	r2, [r3, #0]
		}

	if (transfer_type == 0)
 80004f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d138      	bne.n	800056c <DMA_parameters+0x270>
	{
		*DMA_REG[id][2] &= ~(transfer_type<<23); //single Memory transfer
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	491a      	ldr	r1, [pc, #104]	; (8000568 <DMA_parameters+0x26c>)
 80004fe:	4613      	mov	r3, r2
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	1a9b      	subs	r3, r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	440b      	add	r3, r1
 8000508:	3308      	adds	r3, #8
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	6819      	ldr	r1, [r3, #0]
 800050e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	43db      	mvns	r3, r3
 8000516:	461c      	mov	r4, r3
 8000518:	7bfa      	ldrb	r2, [r7, #15]
 800051a:	4813      	ldr	r0, [pc, #76]	; (8000568 <DMA_parameters+0x26c>)
 800051c:	4613      	mov	r3, r2
 800051e:	00db      	lsls	r3, r3, #3
 8000520:	1a9b      	subs	r3, r3, r2
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	4403      	add	r3, r0
 8000526:	3308      	adds	r3, #8
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	ea01 0204 	and.w	r2, r1, r4
 800052e:	601a      	str	r2, [r3, #0]
		*DMA_REG[id][2] &= ~(transfer_type<<21);  //single Peripheral transfer
 8000530:	7bfa      	ldrb	r2, [r7, #15]
 8000532:	490d      	ldr	r1, [pc, #52]	; (8000568 <DMA_parameters+0x26c>)
 8000534:	4613      	mov	r3, r2
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	440b      	add	r3, r1
 800053e:	3308      	adds	r3, #8
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	6819      	ldr	r1, [r3, #0]
 8000544:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000548:	055b      	lsls	r3, r3, #21
 800054a:	43db      	mvns	r3, r3
 800054c:	461c      	mov	r4, r3
 800054e:	7bfa      	ldrb	r2, [r7, #15]
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <DMA_parameters+0x26c>)
 8000552:	4613      	mov	r3, r2
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	1a9b      	subs	r3, r3, r2
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	4403      	add	r3, r0
 800055c:	3308      	adds	r3, #8
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	ea01 0204 	and.w	r2, r1, r4
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	e035      	b.n	80005d4 <DMA_parameters+0x2d8>
 8000568:	20000000 	.word	0x20000000
			}
	else {
		*DMA_REG[id][2] |= (transfer_type<<23); //Memory burst transfer
 800056c:	7bfa      	ldrb	r2, [r7, #15]
 800056e:	4941      	ldr	r1, [pc, #260]	; (8000674 <DMA_parameters+0x378>)
 8000570:	4613      	mov	r3, r2
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	1a9b      	subs	r3, r3, r2
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	440b      	add	r3, r1
 800057a:	3308      	adds	r3, #8
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6819      	ldr	r1, [r3, #0]
 8000580:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	461c      	mov	r4, r3
 8000588:	7bfa      	ldrb	r2, [r7, #15]
 800058a:	483a      	ldr	r0, [pc, #232]	; (8000674 <DMA_parameters+0x378>)
 800058c:	4613      	mov	r3, r2
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4403      	add	r3, r0
 8000596:	3308      	adds	r3, #8
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	ea41 0204 	orr.w	r2, r1, r4
 800059e:	601a      	str	r2, [r3, #0]
		*DMA_REG[id][2] |= (transfer_type<<21);  //Peripheral burst transfer
 80005a0:	7bfa      	ldrb	r2, [r7, #15]
 80005a2:	4934      	ldr	r1, [pc, #208]	; (8000674 <DMA_parameters+0x378>)
 80005a4:	4613      	mov	r3, r2
 80005a6:	00db      	lsls	r3, r3, #3
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	440b      	add	r3, r1
 80005ae:	3308      	adds	r3, #8
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	6819      	ldr	r1, [r3, #0]
 80005b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005b8:	055b      	lsls	r3, r3, #21
 80005ba:	461c      	mov	r4, r3
 80005bc:	7bfa      	ldrb	r2, [r7, #15]
 80005be:	482d      	ldr	r0, [pc, #180]	; (8000674 <DMA_parameters+0x378>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4403      	add	r3, r0
 80005ca:	3308      	adds	r3, #8
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	ea41 0204 	orr.w	r2, r1, r4
 80005d2:	601a      	str	r2, [r3, #0]
				}

	switch (transfer_mode) {
 80005d4:	7f3b      	ldrb	r3, [r7, #28]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d02e      	beq.n	8000638 <DMA_parameters+0x33c>
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d143      	bne.n	8000666 <DMA_parameters+0x36a>
			case fifo:
				*DMA_REG[id][6] |= 0x01<<2; //enable fifo (disable direct mode)
 80005de:	7bfa      	ldrb	r2, [r7, #15]
 80005e0:	4924      	ldr	r1, [pc, #144]	; (8000674 <DMA_parameters+0x378>)
 80005e2:	4613      	mov	r3, r2
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	440b      	add	r3, r1
 80005ec:	3318      	adds	r3, #24
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	6819      	ldr	r1, [r3, #0]
 80005f2:	7bfa      	ldrb	r2, [r7, #15]
 80005f4:	481f      	ldr	r0, [pc, #124]	; (8000674 <DMA_parameters+0x378>)
 80005f6:	4613      	mov	r3, r2
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	4403      	add	r3, r0
 8000600:	3318      	adds	r3, #24
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f041 0204 	orr.w	r2, r1, #4
 8000608:	601a      	str	r2, [r3, #0]
				*DMA_REG[id][6] |=( 0x03<<0); //threshold(full fifo)
 800060a:	7bfa      	ldrb	r2, [r7, #15]
 800060c:	4919      	ldr	r1, [pc, #100]	; (8000674 <DMA_parameters+0x378>)
 800060e:	4613      	mov	r3, r2
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	1a9b      	subs	r3, r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	440b      	add	r3, r1
 8000618:	3318      	adds	r3, #24
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	6819      	ldr	r1, [r3, #0]
 800061e:	7bfa      	ldrb	r2, [r7, #15]
 8000620:	4814      	ldr	r0, [pc, #80]	; (8000674 <DMA_parameters+0x378>)
 8000622:	4613      	mov	r3, r2
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4403      	add	r3, r0
 800062c:	3318      	adds	r3, #24
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f041 0203 	orr.w	r2, r1, #3
 8000634:	601a      	str	r2, [r3, #0]
  	 				break;
 8000636:	e017      	b.n	8000668 <DMA_parameters+0x36c>
			case direct_mode:
				*DMA_REG[id][6] &= ~(0x01<<2);
 8000638:	7bfa      	ldrb	r2, [r7, #15]
 800063a:	490e      	ldr	r1, [pc, #56]	; (8000674 <DMA_parameters+0x378>)
 800063c:	4613      	mov	r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	3318      	adds	r3, #24
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	6819      	ldr	r1, [r3, #0]
 800064c:	7bfa      	ldrb	r2, [r7, #15]
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <DMA_parameters+0x378>)
 8000650:	4613      	mov	r3, r2
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4403      	add	r3, r0
 800065a:	3318      	adds	r3, #24
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f021 0204 	bic.w	r2, r1, #4
 8000662:	601a      	str	r2, [r3, #0]
					break;
 8000664:	e000      	b.n	8000668 <DMA_parameters+0x36c>
				default:
					break;
 8000666:	bf00      	nop
			}

}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bc90      	pop	{r4, r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <start_transfer>:

void start_transfer (unsigned char id){
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]

	*DMA_REG[id][1] |= (0x01<<0);   //clear all interrupts flags (fifo,direct,transfer complete ..)
 8000682:	79fa      	ldrb	r2, [r7, #7]
 8000684:	4944      	ldr	r1, [pc, #272]	; (8000798 <start_transfer+0x120>)
 8000686:	4613      	mov	r3, r2
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	3304      	adds	r3, #4
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	6819      	ldr	r1, [r3, #0]
 8000696:	79fa      	ldrb	r2, [r7, #7]
 8000698:	483f      	ldr	r0, [pc, #252]	; (8000798 <start_transfer+0x120>)
 800069a:	4613      	mov	r3, r2
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4403      	add	r3, r0
 80006a4:	3304      	adds	r3, #4
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f041 0201 	orr.w	r2, r1, #1
 80006ac:	601a      	str	r2, [r3, #0]
	*DMA_REG[id][1] |= (0x01<<2);
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	4939      	ldr	r1, [pc, #228]	; (8000798 <start_transfer+0x120>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	440b      	add	r3, r1
 80006bc:	3304      	adds	r3, #4
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6819      	ldr	r1, [r3, #0]
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	4834      	ldr	r0, [pc, #208]	; (8000798 <start_transfer+0x120>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4403      	add	r3, r0
 80006d0:	3304      	adds	r3, #4
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f041 0204 	orr.w	r2, r1, #4
 80006d8:	601a      	str	r2, [r3, #0]
	*DMA_REG[id][1] |= (0x01<<3);
 80006da:	79fa      	ldrb	r2, [r7, #7]
 80006dc:	492e      	ldr	r1, [pc, #184]	; (8000798 <start_transfer+0x120>)
 80006de:	4613      	mov	r3, r2
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	1a9b      	subs	r3, r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	440b      	add	r3, r1
 80006e8:	3304      	adds	r3, #4
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6819      	ldr	r1, [r3, #0]
 80006ee:	79fa      	ldrb	r2, [r7, #7]
 80006f0:	4829      	ldr	r0, [pc, #164]	; (8000798 <start_transfer+0x120>)
 80006f2:	4613      	mov	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	1a9b      	subs	r3, r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4403      	add	r3, r0
 80006fc:	3304      	adds	r3, #4
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f041 0208 	orr.w	r2, r1, #8
 8000704:	601a      	str	r2, [r3, #0]
	*DMA_REG[id][1] |= (0x01<<4);
 8000706:	79fa      	ldrb	r2, [r7, #7]
 8000708:	4923      	ldr	r1, [pc, #140]	; (8000798 <start_transfer+0x120>)
 800070a:	4613      	mov	r3, r2
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	440b      	add	r3, r1
 8000714:	3304      	adds	r3, #4
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6819      	ldr	r1, [r3, #0]
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	481e      	ldr	r0, [pc, #120]	; (8000798 <start_transfer+0x120>)
 800071e:	4613      	mov	r3, r2
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	1a9b      	subs	r3, r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4403      	add	r3, r0
 8000728:	3304      	adds	r3, #4
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f041 0210 	orr.w	r2, r1, #16
 8000730:	601a      	str	r2, [r3, #0]
	*DMA_REG[id][1] |= (0x01<<5);
 8000732:	79fa      	ldrb	r2, [r7, #7]
 8000734:	4918      	ldr	r1, [pc, #96]	; (8000798 <start_transfer+0x120>)
 8000736:	4613      	mov	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	440b      	add	r3, r1
 8000740:	3304      	adds	r3, #4
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6819      	ldr	r1, [r3, #0]
 8000746:	79fa      	ldrb	r2, [r7, #7]
 8000748:	4813      	ldr	r0, [pc, #76]	; (8000798 <start_transfer+0x120>)
 800074a:	4613      	mov	r3, r2
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4403      	add	r3, r0
 8000754:	3304      	adds	r3, #4
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f041 0220 	orr.w	r2, r1, #32
 800075c:	601a      	str	r2, [r3, #0]
	*DMA_REG[id][2] |= (0x01<<0); //enable stream0
 800075e:	79fa      	ldrb	r2, [r7, #7]
 8000760:	490d      	ldr	r1, [pc, #52]	; (8000798 <start_transfer+0x120>)
 8000762:	4613      	mov	r3, r2
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	1a9b      	subs	r3, r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	440b      	add	r3, r1
 800076c:	3308      	adds	r3, #8
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6819      	ldr	r1, [r3, #0]
 8000772:	79fa      	ldrb	r2, [r7, #7]
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <start_transfer+0x120>)
 8000776:	4613      	mov	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4403      	add	r3, r0
 8000780:	3308      	adds	r3, #8
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f041 0201 	orr.w	r2, r1, #1
 8000788:	601a      	str	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000000 	.word	0x20000000

0800079c <transfer_state>:


int transfer_state (unsigned char id){
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	unsigned int checkstate=0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
	//check if tci is 1 and tei is 0
	if ((((*DMA_REG[id][0]) >>5)&1) && (~(((*DMA_REG[id][0]) >>3)&1)))
 80007aa:	79fa      	ldrb	r2, [r7, #7]
 80007ac:	490b      	ldr	r1, [pc, #44]	; (80007dc <transfer_state+0x40>)
 80007ae:	4613      	mov	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	440b      	add	r3, r1
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f003 0320 	and.w	r3, r3, #32
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <transfer_state+0x2e>
	{
	checkstate =1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	e001      	b.n	80007ce <transfer_state+0x32>
	}
	else {
		 checkstate=0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
	}
    return checkstate;
 80007ce:	68fb      	ldr	r3, [r7, #12]
	}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	20000000 	.word	0x20000000

080007e0 <GPIO_EnableClock>:
unsigned int *lookup[2][10]={{GPIOA_MODER,GPIOA_OTYPER,GPIOA_OSPEEDR,GPIOA_PUPDR,GPIOA_IDR,GPIOA_ODR,GPIOA_BSRR,GPIOA_LCKR,GPIOA_AFRL,GPIOA_AFRH},
		{GPIOB_MODER,GPIOB_OTYPER,GPIOB_OSPEEDR,GPIOB_PUPDR,GPIOB_IDR,GPIOB_ODR,GPIOB_BSRR,GPIOB_LCKR,GPIOB_AFRL,GPIOB_AFRH}};



void GPIO_EnableClock(unsigned char PORT_ID) {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]

      *RCC_AHB1ENR |= (0x01 << PORT_ID);
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <GPIO_EnableClock+0x2c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	79fa      	ldrb	r2, [r7, #7]
 80007f0:	2101      	movs	r1, #1
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	4611      	mov	r1, r2
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <GPIO_EnableClock+0x2c>)
 80007fa:	430b      	orrs	r3, r1
 80007fc:	6013      	str	r3, [r2, #0]

}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40023830 	.word	0x40023830

08000810 <GPIO_Init>:



void GPIO_Init(unsigned char PORT_ID, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 8000810:	b490      	push	{r4, r7}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4604      	mov	r4, r0
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	461a      	mov	r2, r3
 800081e:	4623      	mov	r3, r4
 8000820:	71fb      	strb	r3, [r7, #7]
 8000822:	4603      	mov	r3, r0
 8000824:	71bb      	strb	r3, [r7, #6]
 8000826:	460b      	mov	r3, r1
 8000828:	717b      	strb	r3, [r7, #5]
 800082a:	4613      	mov	r3, r2
 800082c:	713b      	strb	r3, [r7, #4]

      // Configure moder register for pin direction
	*lookup[PORT_ID][0] &= ~(0x03 << 2 * PinNum);
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	4956      	ldr	r1, [pc, #344]	; (800098c <GPIO_Init+0x17c>)
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	2203      	movs	r2, #3
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43db      	mvns	r3, r3
 800084c:	461c      	mov	r4, r3
 800084e:	79fa      	ldrb	r2, [r7, #7]
 8000850:	484e      	ldr	r0, [pc, #312]	; (800098c <GPIO_Init+0x17c>)
 8000852:	4613      	mov	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	4403      	add	r3, r0
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	ea01 0204 	and.w	r2, r1, r4
 8000862:	601a      	str	r2, [r3, #0]
	*lookup[PORT_ID][0] |= PinMode << 2 * PinNum;
 8000864:	79fa      	ldrb	r2, [r7, #7]
 8000866:	4949      	ldr	r1, [pc, #292]	; (800098c <GPIO_Init+0x17c>)
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	440b      	add	r3, r1
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6819      	ldr	r1, [r3, #0]
 8000876:	797a      	ldrb	r2, [r7, #5]
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	461c      	mov	r4, r3
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	4841      	ldr	r0, [pc, #260]	; (800098c <GPIO_Init+0x17c>)
 8000886:	4613      	mov	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4403      	add	r3, r0
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	ea41 0204 	orr.w	r2, r1, r4
 8000896:	601a      	str	r2, [r3, #0]


	*lookup[PORT_ID][1] &= ~(1 << PinNum);
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	493c      	ldr	r1, [pc, #240]	; (800098c <GPIO_Init+0x17c>)
 800089c:	4613      	mov	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	440b      	add	r3, r1
 80008a6:	3304      	adds	r3, #4
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6819      	ldr	r1, [r3, #0]
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	2201      	movs	r2, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	461c      	mov	r4, r3
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	4834      	ldr	r0, [pc, #208]	; (800098c <GPIO_Init+0x17c>)
 80008bc:	4613      	mov	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4413      	add	r3, r2
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	4403      	add	r3, r0
 80008c6:	3304      	adds	r3, #4
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	ea01 0204 	and.w	r2, r1, r4
 80008ce:	601a      	str	r2, [r3, #0]
	*lookup[PORT_ID][1] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	492e      	ldr	r1, [pc, #184]	; (800098c <GPIO_Init+0x17c>)
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	440b      	add	r3, r1
 80008de:	3304      	adds	r3, #4
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	6819      	ldr	r1, [r3, #0]
 80008e4:	793b      	ldrb	r3, [r7, #4]
 80008e6:	f003 0201 	and.w	r2, r3, #1
 80008ea:	79bb      	ldrb	r3, [r7, #6]
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	461c      	mov	r4, r3
 80008f2:	79fa      	ldrb	r2, [r7, #7]
 80008f4:	4825      	ldr	r0, [pc, #148]	; (800098c <GPIO_Init+0x17c>)
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	4403      	add	r3, r0
 8000900:	3304      	adds	r3, #4
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	ea41 0204 	orr.w	r2, r1, r4
 8000908:	601a      	str	r2, [r3, #0]

	*lookup[PORT_ID][3] &= ~(0x03 << 2 * PinNum);
 800090a:	79fa      	ldrb	r2, [r7, #7]
 800090c:	491f      	ldr	r1, [pc, #124]	; (800098c <GPIO_Init+0x17c>)
 800090e:	4613      	mov	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4413      	add	r3, r2
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	440b      	add	r3, r1
 8000918:	330c      	adds	r3, #12
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	6819      	ldr	r1, [r3, #0]
 800091e:	79bb      	ldrb	r3, [r7, #6]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	2203      	movs	r2, #3
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	461c      	mov	r4, r3
 800092c:	79fa      	ldrb	r2, [r7, #7]
 800092e:	4817      	ldr	r0, [pc, #92]	; (800098c <GPIO_Init+0x17c>)
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	4403      	add	r3, r0
 800093a:	330c      	adds	r3, #12
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	ea01 0204 	and.w	r2, r1, r4
 8000942:	601a      	str	r2, [r3, #0]
	*lookup[PORT_ID][3] |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 8000944:	79fa      	ldrb	r2, [r7, #7]
 8000946:	4911      	ldr	r1, [pc, #68]	; (800098c <GPIO_Init+0x17c>)
 8000948:	4613      	mov	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	440b      	add	r3, r1
 8000952:	330c      	adds	r3, #12
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6819      	ldr	r1, [r3, #0]
 8000958:	793b      	ldrb	r3, [r7, #4]
 800095a:	105b      	asrs	r3, r3, #1
 800095c:	f003 0203 	and.w	r2, r3, #3
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	461c      	mov	r4, r3
 800096a:	79fa      	ldrb	r2, [r7, #7]
 800096c:	4807      	ldr	r0, [pc, #28]	; (800098c <GPIO_Init+0x17c>)
 800096e:	4613      	mov	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	4403      	add	r3, r0
 8000978:	330c      	adds	r3, #12
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	ea41 0204 	orr.w	r2, r1, r4
 8000980:	601a      	str	r2, [r3, #0]


}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bc90      	pop	{r4, r7}
 800098a:	4770      	bx	lr
 800098c:	20000038 	.word	0x20000038

08000990 <GPIO_WritePin>:

unsigned char GPIO_WritePin(unsigned char PORT_ID, unsigned char PinNum,
                            unsigned char Data) {
 8000990:	b490      	push	{r4, r7}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	460b      	mov	r3, r1
 800099c:	71bb      	strb	r3, [r7, #6]
 800099e:	4613      	mov	r3, r2
 80009a0:	717b      	strb	r3, [r7, #5]
  unsigned char result;
      if (((*lookup[PORT_ID][0] & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	492c      	ldr	r1, [pc, #176]	; (8000a58 <GPIO_WritePin+0xc8>)
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	440b      	add	r3, r1
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	79ba      	ldrb	r2, [r7, #6]
 80009b6:	0052      	lsls	r2, r2, #1
 80009b8:	2103      	movs	r1, #3
 80009ba:	fa01 f202 	lsl.w	r2, r1, r2
 80009be:	401a      	ands	r2, r3
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	fa22 f303 	lsr.w	r3, r2, r3
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d13d      	bne.n	8000a48 <GPIO_WritePin+0xb8>
        if (Data) {
 80009cc:	797b      	ldrb	r3, [r7, #5]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d01b      	beq.n	8000a0a <GPIO_WritePin+0x7a>
        	*lookup[PORT_ID][5] |= (1 << PinNum);
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	4920      	ldr	r1, [pc, #128]	; (8000a58 <GPIO_WritePin+0xc8>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	440b      	add	r3, r1
 80009e0:	3314      	adds	r3, #20
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6819      	ldr	r1, [r3, #0]
 80009e6:	79bb      	ldrb	r3, [r7, #6]
 80009e8:	2201      	movs	r2, #1
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	461c      	mov	r4, r3
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	4819      	ldr	r0, [pc, #100]	; (8000a58 <GPIO_WritePin+0xc8>)
 80009f4:	4613      	mov	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	4403      	add	r3, r0
 80009fe:	3314      	adds	r3, #20
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	ea41 0204 	orr.w	r2, r1, r4
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	e01b      	b.n	8000a42 <GPIO_WritePin+0xb2>
        } else {
        	*lookup[PORT_ID][5] &= ~(1 << PinNum);
 8000a0a:	79fa      	ldrb	r2, [r7, #7]
 8000a0c:	4912      	ldr	r1, [pc, #72]	; (8000a58 <GPIO_WritePin+0xc8>)
 8000a0e:	4613      	mov	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3314      	adds	r3, #20
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6819      	ldr	r1, [r3, #0]
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
 8000a20:	2201      	movs	r2, #1
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	461c      	mov	r4, r3
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	480a      	ldr	r0, [pc, #40]	; (8000a58 <GPIO_WritePin+0xc8>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	4403      	add	r3, r0
 8000a38:	3314      	adds	r3, #20
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	ea01 0204 	and.w	r2, r1, r4
 8000a40:	601a      	str	r2, [r3, #0]
        }
        result = OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	73fb      	strb	r3, [r7, #15]
 8000a46:	e001      	b.n	8000a4c <GPIO_WritePin+0xbc>
      } else {
        result = NOK;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
      }


  return result;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc90      	pop	{r4, r7}
 8000a56:	4770      	bx	lr
 8000a58:	20000038 	.word	0x20000038

08000a5c <main>:

unsigned int scr[100];
unsigned int dest[100];
unsigned char i,j,k,checkval,state;
void check_transmision(void);
int main(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af04      	add	r7, sp, #16

	for( i=0; i<100; i++) {
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <main+0x84>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	e018      	b.n	8000a9c <main+0x40>
	    scr[i] = 100*(1+i);
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <main+0x84>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	2264      	movs	r2, #100	; 0x64
 8000a72:	fb02 f103 	mul.w	r1, r2, r3
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <main+0x84>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <main+0x88>)
 8000a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    dest[i] =0;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <main+0x84>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	4619      	mov	r1, r3
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <main+0x8c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for( i=0; i<100; i++) {
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <main+0x84>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <main+0x84>)
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <main+0x84>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b63      	cmp	r3, #99	; 0x63
 8000aa2:	d9e2      	bls.n	8000a6a <main+0xe>
	}

	GPIO_EnableClock(0);    //	enable clock of port A
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fe9b 	bl	80007e0 <GPIO_EnableClock>
	GPIO_Init(0,0,OUTPUT,PUSH_PULL);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2201      	movs	r2, #1
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff fead 	bl	8000810 <GPIO_Init>
	DMA_Init(0);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fb8c 	bl	80001d4 <DMA_Init>
	DMA_parameters(0,scr,dest,100,word,fifo,BEATS4,Memory_to_memory);
 8000abc:	2302      	movs	r3, #2
 8000abe:	9303      	str	r3, [sp, #12]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	9302      	str	r3, [sp, #8]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	9301      	str	r3, [sp, #4]
 8000ac8:	2302      	movs	r3, #2
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2364      	movs	r3, #100	; 0x64
 8000ace:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <main+0x8c>)
 8000ad0:	4904      	ldr	r1, [pc, #16]	; (8000ae4 <main+0x88>)
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff fc12 	bl	80002fc <DMA_parameters>
	start_transfer(0);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff fdcd 	bl	8000678 <start_transfer>
  while (1) {
 8000ade:	e7fe      	b.n	8000ade <main+0x82>
 8000ae0:	200003ca 	.word	0x200003ca
 8000ae4:	20000238 	.word	0x20000238
 8000ae8:	200000a4 	.word	0x200000a4

08000aec <DMA2_Stream0_ISR>:
  }
  return 0;
}

void DMA2_Stream0_ISR()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	check_transmission();
 8000af0:	f000 f808 	bl	8000b04 <check_transmission>
	}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <DMA1_Stream0_ISR>:
void DMA1_Stream0_ISR()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	check_transmission();
 8000afc:	f000 f802 	bl	8000b04 <check_transmission>
	}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <check_transmission>:
void check_transmission(void){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	for ( i=0; i<100; i++){
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <check_transmission+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	e01b      	b.n	8000b48 <check_transmission+0x44>
		if (scr[i] == dest[i])
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <check_transmission+0x90>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <check_transmission+0x94>)
 8000b18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <check_transmission+0x90>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <check_transmission+0x98>)
 8000b24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d103      	bne.n	8000b34 <check_transmission+0x30>
		{
			checkval =1;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <check_transmission+0x9c>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	e003      	b.n	8000b3c <check_transmission+0x38>
		}
		else{
			checkval =0;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <check_transmission+0x9c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
			break;
 8000b3a:	e009      	b.n	8000b50 <check_transmission+0x4c>
	for ( i=0; i<100; i++){
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <check_transmission+0x90>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <check_transmission+0x90>)
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <check_transmission+0x90>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b63      	cmp	r3, #99	; 0x63
 8000b4e:	d9df      	bls.n	8000b10 <check_transmission+0xc>
		}
	}
	state = transfer_state(0);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fe23 	bl	800079c <transfer_state>
 8000b56:	4603      	mov	r3, r0
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <check_transmission+0xa0>)
 8000b5c:	701a      	strb	r2, [r3, #0]
	if ((state && checkval)==1){
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <check_transmission+0xa0>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d005      	beq.n	8000b72 <check_transmission+0x6e>
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <check_transmission+0x9c>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <check_transmission+0x6e>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <check_transmission+0x70>
 8000b72:	2300      	movs	r3, #0
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d105      	bne.n	8000b84 <check_transmission+0x80>
		GPIO_WritePin(0,0,1);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff ff07 	bl	8000990 <GPIO_WritePin>
	}
	else {
		GPIO_WritePin(0,0,0);
	}
}
 8000b82:	e004      	b.n	8000b8e <check_transmission+0x8a>
		GPIO_WritePin(0,0,0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff ff01 	bl	8000990 <GPIO_WritePin>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200003ca 	.word	0x200003ca
 8000b98:	20000238 	.word	0x20000238
 8000b9c:	200000a4 	.word	0x200000a4
 8000ba0:	200003cb 	.word	0x200003cb
 8000ba4:	200003c9 	.word	0x200003c9

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be8:	4c0b      	ldr	r4, [pc, #44]	; (8000c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bf6:	f7ff ffd7 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f000 f811 	bl	8000c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff ff2d 	bl	8000a5c <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c10:	08000c88 	.word	0x08000c88
  ldr r2, =_sbss
 8000c14:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c18:	200003cc 	.word	0x200003cc

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <__libc_init_array>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	4d0d      	ldr	r5, [pc, #52]	; (8000c58 <__libc_init_array+0x38>)
 8000c24:	4c0d      	ldr	r4, [pc, #52]	; (8000c5c <__libc_init_array+0x3c>)
 8000c26:	1b64      	subs	r4, r4, r5
 8000c28:	10a4      	asrs	r4, r4, #2
 8000c2a:	2600      	movs	r6, #0
 8000c2c:	42a6      	cmp	r6, r4
 8000c2e:	d109      	bne.n	8000c44 <__libc_init_array+0x24>
 8000c30:	4d0b      	ldr	r5, [pc, #44]	; (8000c60 <__libc_init_array+0x40>)
 8000c32:	4c0c      	ldr	r4, [pc, #48]	; (8000c64 <__libc_init_array+0x44>)
 8000c34:	f000 f818 	bl	8000c68 <_init>
 8000c38:	1b64      	subs	r4, r4, r5
 8000c3a:	10a4      	asrs	r4, r4, #2
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	42a6      	cmp	r6, r4
 8000c40:	d105      	bne.n	8000c4e <__libc_init_array+0x2e>
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
 8000c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c48:	4798      	blx	r3
 8000c4a:	3601      	adds	r6, #1
 8000c4c:	e7ee      	b.n	8000c2c <__libc_init_array+0xc>
 8000c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c52:	4798      	blx	r3
 8000c54:	3601      	adds	r6, #1
 8000c56:	e7f2      	b.n	8000c3e <__libc_init_array+0x1e>
 8000c58:	08000c80 	.word	0x08000c80
 8000c5c:	08000c80 	.word	0x08000c80
 8000c60:	08000c80 	.word	0x08000c80
 8000c64:	08000c84 	.word	0x08000c84

08000c68 <_init>:
 8000c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6a:	bf00      	nop
 8000c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6e:	bc08      	pop	{r3}
 8000c70:	469e      	mov	lr, r3
 8000c72:	4770      	bx	lr

08000c74 <_fini>:
 8000c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c76:	bf00      	nop
 8000c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7a:	bc08      	pop	{r3}
 8000c7c:	469e      	mov	lr, r3
 8000c7e:	4770      	bx	lr
